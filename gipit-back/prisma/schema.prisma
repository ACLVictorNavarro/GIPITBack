generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model candidate_management {
  id                    Int                     @id @default(autoincrement())
  candidate_id          Int?
  management_id         Int?
  status                String?                 @db.VarChar(50)
  start_date            DateTime?               @db.Date
  end_date              DateTime?               @db.Date
  created_at            DateTime?               @default(now()) @db.Timestamp(6)
  updated_at            DateTime?               @default(now()) @db.Timestamp(6)
  position              String?
  rate                  Decimal?
  candidates            candidates?             @relation(fields: [candidate_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  management            management?             @relation(fields: [management_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post_sales_activities post_sales_activities[]
}

model candidate_process {
  id                  Int                @id @default(autoincrement())
  candidate_id        Int?
  process_id          Int?
  created_at          DateTime?          @default(now()) @db.Timestamp(6)
  updated_at          DateTime?          @default(now()) @db.Timestamp(6)
  technical_skills    String?
  soft_skills         String?
  client_comments     String?
  match_percent       Decimal?           @db.Decimal(5, 2)
  interview_questions String?
  stage               String             @default("entrevistas")
  candidates          candidates?        @relation(fields: [candidate_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  process             process?           @relation(fields: [process_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comments_process    comments_process[]
}

model candidates {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(255)
  phone                String?                @db.VarChar(50)
  email                String                 @unique(map: "email_unique") @db.VarChar(255)
  address              String?
  jsongpt_text         String?
  total_experience     Int?                   @default(0)
  candidate_management candidate_management[]
  candidate_process    candidate_process[]
  pre_invoice_items    pre_invoice_items[]
}

model comments_process {
  id                   Int                @id @default(autoincrement())
  candidate_process_id Int?
  user_id              Int?
  comments             String?
  candidate_process    candidate_process? @relation(fields: [candidate_process_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                users?             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model company {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  description   String?
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  updated_at    DateTime?       @default(now()) @db.Timestamp(6)
  logo          Bytes?
  management    management[]
  pre_invoices  pre_invoices[]
  users_company users_company[]
}

model management {
  id                   Int                    @id @default(autoincrement())
  company_id           Int?
  name                 String                 @db.VarChar(255)
  description          String?
  created_at           DateTime?              @default(now()) @db.Timestamp(6)
  updated_at           DateTime?              @default(now()) @db.Timestamp(6)
  candidate_management candidate_management[]
  company              company?               @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  process              process[]
  users_management     users_management[]
}

model post_sales_activities {
  id                      Int                   @id @default(autoincrement())
  candidate_management_id Int?
  benefit                 String?
  client_comment          String?
  date                    DateTime?             @db.Date
  created_at              DateTime?             @default(now()) @db.Timestamp(6)
  updated_at              DateTime?             @default(now()) @db.Timestamp(6)
  eval_stack              Decimal?              @default(0) @db.Decimal(10, 2)
  eval_comunicacion       Decimal?              @default(0) @db.Decimal(10, 2)
  eval_motivacion         Decimal?              @default(0) @db.Decimal(10, 2)
  eval_cumplimiento       Decimal?              @default(0) @db.Decimal(10, 2)
  acciones_acl            String?
  proyecction             String?
  candidate_management    candidate_management? @relation(fields: [candidate_management_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model pre_invoice_items {
  id             Int           @id @default(autoincrement())
  pre_invoice_id Int?
  candidate_id   Int?
  service        String?
  rate           Decimal?      @db.Decimal(10, 2)
  hours          Decimal?      @db.Decimal(5, 2)
  subtotal       Decimal?      @db.Decimal(10, 2)
  vat            Decimal?      @db.Decimal(10, 2)
  total          Decimal?      @db.Decimal(10, 2)
  description    String?
  candidates     candidates?   @relation(fields: [candidate_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pre_invoices   pre_invoices? @relation(fields: [pre_invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model pre_invoices {
  id                Int                 @id @default(autoincrement())
  estimated_date    DateTime?           @db.Date
  expiration_date   DateTime?           @db.Date
  total_value       Decimal?            @db.Decimal(10, 2)
  description       String?
  status            String?             @db.VarChar(20)
  company_id        Int?                @default(1)
  pre_invoice_items pre_invoice_items[]
  company           company?            @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model process {
  id                    Int                 @id @default(autoincrement())
  job_offer             String              @db.VarChar(255)
  job_offer_description String?
  opened_at             DateTime?           @db.Date
  closed_at             DateTime?           @db.Date
  pre_filtered          Boolean?            @default(false)
  status                String?             @db.VarChar(50)
  created_at            DateTime?           @default(now()) @db.Timestamp(6)
  updated_at            DateTime?           @default(now()) @db.Timestamp(6)
  management_id         Int?
  candidate_process     candidate_process[]
  management            management?         @relation(fields: [management_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  email            String             @unique @db.VarChar(255)
  created_at       DateTime?          @default(now()) @db.Timestamp(6)
  updated_at       DateTime?          @default(now()) @db.Timestamp(6)
  position         String?            @db.VarChar(255)
  role_id          Int
  is_active        Boolean            @default(true)
  comments_process comments_process[]
  roles            roles              @relation(fields: [role_id], references: [id], onUpdate: NoAction)
  users_company    users_company[]
  users_management users_management[]
}

model users_management {
  id            Int         @id @default(autoincrement())
  user_id       Int?
  management_id Int?
  created_at    DateTime?   @default(now()) @db.Timestamp(6)
  updated_at    DateTime?   @default(now()) @db.Timestamp(6)
  management    management? @relation(fields: [management_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         users?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model migrate {
  field1 String?   @db.VarChar(100)
  field2 DateTime? @db.Date
  field3 String?   @db.VarChar(100)
  field4 String?   @db.VarChar(100)
  field5 String?   @db.VarChar(100)
  field6 String?   @db.VarChar(100)
  field7 String?   @db.VarChar(100)

  @@ignore
}

model roles {
  id        Int       @id @default(autoincrement())
  nombre    String    @db.VarChar(255)
  createdat DateTime? @default(now()) @db.Timestamp(6)
  updatedat DateTime? @default(now()) @db.Timestamp(6)
  users     users[]
}

model users_company {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  company_id Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  company    company?  @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
